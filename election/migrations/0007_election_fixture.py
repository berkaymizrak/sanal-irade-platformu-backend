# Generated by Django 4.1.7 on 2023-03-30 03:10

from django.db import migrations
import random


def run_fixtures(apps, scheme_editor):
    election_dump = [
        {
            'id': 1,
            'start_date': '2023-05-14',
            'end_date': '2023-05-15',
        },
        {
            'id': 2,
            'start_date': '2023-05-14',
            'end_date': '2023-05-15',
        },
    ]
    electiontranslation_dump = [
        {
            'language_code': 'tr',
            'name': 'Cumhurbaşkanı Seçimi',
            'master_id': 1,
        },
        {
            'language_code': 'tr',
            'name': '28. Dönem Milletvekili Genel Seçimi',
            'master_id': 2,
        },
    ]
    election_candidate_dump = [
        {
            'id': 1,
            'election_id': 1,
            'name': 'Recep Tayyip Erdoğan',
        },
        {
            'id': 2,
            'election_id': 1,
            'name': 'Kemal Kılıçdaroğlu',
        },
        {
            'id': 3,
            'election_id': 1,
            'name': 'Muharrem İnce',
        },
        {
            'id': 4,
            'election_id': 1,
            'name': 'Sinan Oğan',
        },
        {
            'id': 5,
            'election_id': 2,
            'name': 'Ak Parti',
        },
        {
            'id': 6,
            'election_id': 2,
            'name': 'CHP',
        },
        {
            'id': 7,
            'election_id': 2,
            'name': 'MHP',
        },
        {
            'id': 8,
            'election_id': 2,
            'name': 'HDP',
        },
        {
            'id': 9,
            'election_id': 2,
            'name': 'İYİ Parti',
        },
        {
            'id': 10,
            'election_id': 2,
            'name': 'Vatan Partisi',
        },
        {
            'id': 11,
            'election_id': 2,
            'name': 'Saadet Partisi',
        },
        {
            'id': 12,
            'election_id': 2,
            'name': 'DSP',
        },
        {
            'id': 13,
            'election_id': 2,
            'name': 'BBP',
        },
    ]
    ballot_box_dump = [
        {
            'id': 1,
            'election_id': 1,
            'box_number': 123123,
            'district_id': 1,
        },
        {
            'id': 2,
            'election_id': 2,
            'box_number': 123123,
            'district_id': 1,
        },
        {
            'id': 3,
            'election_id': 1,
            'box_number': 123124,
            'district_id': 2,
        },
        {
            'id': 4,
            'election_id': 2,
            'box_number': 123124,
            'district_id': 2,
        },
        {
            'id': 5,
            'election_id': 1,
            'box_number': 123125,
            'district_id': 3,
        },
        {
            'id': 6,
            'election_id': 2,
            'box_number': 123125,
            'district_id': 3,
        },
        {
            'id': 7,
            'election_id': 1,
            'box_number': 123126,
            'district_id': 4,
        },
        {
            'id': 8,
            'election_id': 2,
            'box_number': 123126,
            'district_id': 4,
        },
    ]
    election_result_dump = []
    for ballot_box in ballot_box_dump:
        for candidate in election_candidate_dump:
            if candidate['election_id'] == ballot_box['election_id']:
                election_result_dump.append({
                    'candidate_id': candidate['id'],
                    'ballot_box_id': ballot_box['id'],
                    'votes': random.randint(2000, 20000),
                })

    ballot_box_report_dump = []
    for ballot_box in ballot_box_dump:
        ballot_box_report_dump.append({
            'id': ballot_box['id'],
            'ballot_box_id': ballot_box['id'],
            'total_votes': random.randint(19000, 20000),
            'approved': random.choice([True, False]),
        })

    candidate_report_dump = []
    for ballot_box_report in ballot_box_report_dump:
        for candidate in election_candidate_dump:
            ballot_box_report__election_id = next(
                ballot_box['election_id'] for ballot_box in ballot_box_dump
                if ballot_box['id'] == ballot_box_report['ballot_box_id']
            )

            if candidate['election_id'] == ballot_box_report__election_id:
                candidate_report_dump.append({
                    'candidate_id': candidate['id'],
                    'ballot_box_report_id': ballot_box_report['id'],
                    'votes': random.randint(2000, 4000),
                })

    models = {
        'Election': election_dump,
        'ElectionTranslation': electiontranslation_dump,
        'ElectionCandidate': election_candidate_dump,
        'BallotBox': ballot_box_dump,
        'ElectionResult': election_result_dump,
        'BallotBoxReport': ballot_box_report_dump,
        'CandidateReport': candidate_report_dump,
    }

    for model_name, dump_data in models.items():
        model = apps.get_model('election', model_name)
        obj_list = [model(**data_dict) for data_dict in dump_data]
        model.objects.bulk_create(obj_list)


class Migration(migrations.Migration):
    dependencies = [
        ('election', '0006_district_fixture'),
    ]

    operations = [
        migrations.RunPython(run_fixtures),
    ]
